---
title: "Exercise3"
format: html
editor: visual
---

***Libraries***

```{r}
library(readr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(sf)
library(lubridate)
library(mapview)
library(leaflet)
library(leaflet.extras)
```

## Data

```{r}
wildschwein <- read_csv("data/wildschwein_BE_2056.csv")
posmo <- read_delim("data/posmo_20230605-20230905.csv")

```

## Intro

```{r}
sabi <- wildschwein %>% 
  unique() %>%
  filter(TierName=="Sabi") %>%
  filter(DatetimeUTC >= "2015-07-01", DatetimeUTC < "2015-07-03") 
```

```{r}
ggplot(sabi, aes(E,N, color=DatetimeUTC)) +
  geom_point() +
  geom_path() +
  coord_equal() +
  theme_minimal()
  
```

```{r}
ggplot(sabi, aes(DatetimeUTC, 1)) +
  geom_point()
```

```{r}

sabi <- sabi %>%
    mutate(
        nMinus2 = sqrt((lag(E, 2) - E)^2 + (lag(N, 2) - N)^2), 
        nMinus1 = sqrt((lag(E, 1) - E)^2 + (lag(N, 1) - N)^2), 
        nPlus1  = sqrt((E - lead(E, 1))^2 + (N - lead(N, 1))^2), 
        nPlus2  = sqrt((E - lead(E, 2))^2 + (N - lead(N, 2))^2)
    )

sabi <- sabi %>%
  rowwise() %>%
  mutate(
    stepMean = mean(c(nMinus2, nMinus1, nPlus1, nPlus2))) %>%
  ungroup() %>%
  mutate(
    static= stepMean < mean(stepMean, na.rm =T))

sabi_static <- sabi %>%
  filter(!static)
```

```{r}
grid.arrange(
  
sabi %>%
  ggplot(aes(E,N, color=static)) +
  geom_path() +
  geom_point() +
  coord_fixed() +
  ggtitle("Static & not static points compared") +
  labs(color = "Static") 
,
sabi_static %>%
  ggplot(aes(E,N, color=TierName)) +
  geom_path() +
  geom_point() +
  coord_fixed() +
  ggtitle("Path with static Points removed") +
  labs(color="Path of Sabi")
, nrow=1
)

```

## Preparation

```{r}
# Keep only the necessary columns
posmo <- read_delim("data/posmo_20230605-20230905.csv")
posmo <- select(posmo, datetime, lon_x, lat_y)
posmo <- st_as_sf(posmo, coords = c("lon_x","lat_y"), crs = 4326) %>%
  st_transform(2056)

posmo_coords <- st_coordinates(posmo)
posmo <- cbind(posmo,posmo_coords)
```

## Task 1

Visually comparing different stepMeans to get a reasonable threshold determine stops.

```{r}
posmo <- posmo %>%
    mutate(
        nMinus2 = sqrt((lag(X, 2) - X)^2 + (lag(Y, 2) - Y)^2), 
        nMinus1 = sqrt((lag(X, 1) - X)^2 + (lag(Y, 1) - Y)^2), 
        nPlus1  = sqrt((X - lead(X, 1))^2 + (Y - lead(Y, 1))^2), 
        nPlus2  = sqrt((X - lead(X, 2))^2 + (Y - lead(Y, 2))^2)) %>%
  rowwise() %>%
  mutate(
    stepMean = mean(c(nMinus2, nMinus1, nPlus1, nPlus2))) %>%
  ungroup() %>%
  mutate(
    static10= stepMean < 10) %>%
    mutate(
    static15= stepMean < 15) %>%
  mutate(
    static20= stepMean < 20) %>%
  mutate(
    static25= stepMean < 25) %>%
  mutate(
    static30= stepMean < 30) %>%
  mutate(
    static35= stepMean < 35) %>%
  mutate (
    rownr=row_number())

overallMean <- mean(posmo$stepMean, na.rm =T)

posmo_0508 <- posmo %>% filter(datetime > "2023-05-07" & datetime<"2023-05-09")

mapview(posmo_0508, zcol="static10")+
  mapview(posmo_0508, zcol="static15") +
  mapview(posmo_0508, zcol="static20") +
  mapview(posmo_0508, zcol="static25") +
  mapview(posmo_0508, zcol="static30") +
  mapview(posmo_0508, zcol="static35") +
  mapview(posmo_0508 %>% filter(static15==F), zcol="rownr", popup="datetime")

```

## Task 3

```{r}
ggplot(posmo_0508, aes(X,Y, color=static15)) +
  geom_point() +
  ggtitle(paste0("Tracking Data Micha from ", as_date(posmo_0508$datetime[1]))) +
  labs(color="Static") +
  theme_minimal()
```

## Task 4

```{r}
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}

posmo_0508 <- posmo_0508 %>%
  mutate(segment_id = rle_id(static15)) %>%
  group_by(segment_id) %>%
  mutate(segment_len = n()) %>%
  ungroup
  
```

```{r}
posmo_0508_cleaned <- posmo_0508 %>%
  filter(segment_len >= 5)

grid.arrange(
  ggplot(posmo_0508, aes(X,Y, color=segment_id))+
    geom_point(show.legend = FALSE) +
    geom_point(posmo_0508 %>% filter(segment_len<5), mapping=aes(X,Y), color="black") +
    theme_minimal() +
    ggtitle("All Segments"),
  
  ggplot(posmo_0508_cleaned, aes(X,Y, color=segment_id))+
    geom_point(show.legend = FALSE) +
    theme_minimal()+
    ggtitle("Long Segments Only")
)
```

## Task 5

```{r}
pedestrian <- read_csv("data/pedestrian.csv")

plots <- list()  # Create an empty list to store the plots
cols <- list("purple", "lightgreen", "pink", "lightblue", "grey", "orange")
for (id in 1:6) {
  p <- ggplot(pedestrian %>% filter(TrajID == id), aes(E, N)) +
    geom_path()+
    geom_point(color = cols[id]) +
    ggtitle(paste0("TrajID: ", as.character(id)))
  
  plots[[id]] <- p  # Add each plot to the list
  
}

p <- ggplot(pedestrian, aes(E, N)) +
      geom_point()

plots[[length(plots)+1]] <- p 

grid.arrange(grobs = plots, ncol = 2)
```
